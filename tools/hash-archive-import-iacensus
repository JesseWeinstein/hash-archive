#!/usr/bin/env node
// Copyright 2016 Ben Trask
// MIT licensed (see LICENSE for details)

var fs = require("fs");
var pathm = require("path");
var zlib = require("zlib");

var csv = require("csv");

var db_pool = require("../db_pool");
var config = require("../config_obj");
var has = require("../has");
var mime = require("../mime");
var schema = require("../schema");

if(process.argv.length <= 2) {
	console.log("Usage: hash-archive-import-iacencus path");
	console.log("Warning: file's modification date is used for timestamp");
	process.exit(1);
}

log("Importer started");
process.on("exit", function() {
	log("Importer exiting");
});
process.on("uncaughtException", function(err) {
	log("Importer error");
	throw err;
});
function log(str) {
	console.log((new Date).toISOString()+": "+str);
}

var path = pathm.resolve(process.argv[2]);
var file = fs.createReadStream(path);
var gunzip = new zlib.Gunzip();
var parser = csv.parse({ delimiter: "\t" });
var time = null;

file.pipe(gunzip).pipe(parser);
file.on("open", function(fd) {
	var stats = fs.fstatSync(fd);
	time = +stats.mtime;
});

db_pool.setup(1, config["db_path"], db_pool.OPEN_READWRITE);

db_pool.open(function(db) {
	db.serialize();

	// Fuck node-csv forever.
	// parser.pause() is completely broken.
	var wait = false;
	parser.on("readable", function next() {
		if(wait) return;
		var row = parser.read();
		if(!row) return;
		wait = true;
		add(db, row, function(err) {
			if(err) throw err;
			wait = false;
			next();
		});
	});
});

function add(db, row, cb) {
	var url = "https://archive.org/download/"+row[0]+"/"+row[1];
	db.run("BEGIN TRANSACTION");
	schema.insert_request(db, url, time, function(err, req) {
		if(err) {
			// Ignore duplicate rows.
			if("SQLITE_CONSTRAINT" === err.code) {
				db.run("ROLLBACK", function(err) {
					cb();
				});
				return;
			}
			throw err;
		}
		var ext = pathm.extname(row[1]) || null;
//		if(ext && !has(mime, ext)) throw new Error("Unknown type of "+row[0]+"/"+row[1]);
		var type = mime[ext];
		var md5 = new Buffer(row[2], "hex");
		var sha1 = row[3] ? new Buffer(row[3], "hex") : null;
//		console.log(type, md5, sha1);
		var res = {
			status: 200,
			response_time: time,
			content_type: type,
			hashes: {
				"md5": md5,
				"sha1": sha1,
			},
		};
		schema.insert_response(db, req, res,
		function(err, respopnse_id) {
			if(err) throw err;
			db.run("COMMIT", function(err) {
				if(err) throw err;
				cb();
			});
		});
	});
}

